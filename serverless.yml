service: backend-erin-scheduler
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod
  region: us-east-1
  memorySize: 1024
  timeout: 15
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - events:PutEvents
            - events:PutRule
            - events:PutTargets
          Resource: 
            - arn:aws:events:us-east-1:452999660372:event-bus/default
            - arn:aws:events:us-east-1:452999660372:rule/erin-*


plugins:
  - serverless-offline
  - serverless-dotenv-plugin

resources:
  Resources:
    RuleCreateEvent:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: default
        Name: 'erin-event' 
        EventPattern:
          source:
            - backend-erin-api
          detail-type:
            - send-email
          detail:
            first_name:
              - string
            last_name:
              - string
            
    EventScheduleRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EventScheduleRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEventBridgeSchedulerFullAccess

functions:
  api:
    handler: handler.api
    destinations:
      onSuccess: arn:aws:events:us-east-1:452999660372:event-bus/default
    events: 
      - http: 
          path: /
          method: ANY
          cors: true
      - http: 
          path: /{proxy+}
          method: ANY
          cors: true

    environment:
      NODE_ENV: development
      PORT: 5026
      MONGO_DEV: mongodb+srv://admin:admin@developmentdatabase.6twbbjd.mongodb.net/?retryWrites=true&w=majority
      MONGO_PROD: mongodb+srv://admin:admin@developmentdatabase.6twbbjd.mongodb.net/?retryWrites=true&w=majority
      REDIS_HOST: redis-19949.c292.ap-southeast-1-1.ec2.cloud.redislabs.com
      REDIS_PORT: 19949
      REDIS_USERNAME: default
      REDIS_PASSWORD: wcP9VpuCt8eEMoIVSsME7zQgVozVyYf8

      MAIL_PRODUCTIONS: https://email-service.digitalenvision.com.au
      MAIL_DEV: https://email-service.digitalenvision.com.au
      SMTP_USERNAME: dashawn.haley54@ethereal.email
      SMTP_PASSWORD: vq7pKfBj8AbCy5qZmC

  sendEmail:
    handler: handler.mailer
    events:
      - eventBridge:
          eventBus: default
          description: sending a mail
          pattern:
            detail:
              first_name:
                - string
              last_name:
                - string
          

  
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
